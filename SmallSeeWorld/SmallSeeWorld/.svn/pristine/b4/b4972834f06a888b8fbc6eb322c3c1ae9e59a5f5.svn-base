package com.wx.seeworld.Activity;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.WebSettings;
import android.webkit.WebSettings.TextSize;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.wx.seeworld.R;
import com.wx.seeworld.Utils.AnimationUtils;
import com.wx.seeworld.Utils.DensityUtils;
import com.wx.seeworld.Utils.ReadedMark;
import com.wx.seeworld.Utils.ShareUtils;
import com.wx.seeworld.Utils.SharedPreUtils;
import com.wx.seeworld.Utils.SystemBarTintUtils;
import com.wx.seeworld.Utils.ToastUtils;
import com.wx.seeworld.dao.Collectdao;
import com.wx.seeworld.loading.MonIndicator;

@SuppressWarnings("deprecation")
public class NewsDetailActivity extends Activity implements OnClickListener {

	private String detailsUrl;
	private WebView webView;
	private LinearLayout llBackPage;
	private LinearLayout llMenuSelect;
	private PopupWindow popup;
	private MonIndicator loadingMonIndicator;
	private String newsTitle;
	private String imgUrl;
	private boolean tagSuccess = true;

	private ImageView ivCollect;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		themeStyle = SharedPreUtils.getComSharePref(NewsDetailActivity.this,
				"theme_style", "day");
		if (themeStyle.equals("night")) {
			setTheme(R.style.MyThemeNight);
		}

		setContentView(R.layout.activity_newsdetails);

		detailsUrl = getIntent().getStringExtra("detailsUrl");
		newsTitle = getIntent().getStringExtra("Title");
		imgUrl = getIntent().getStringExtra("imgUrl");

		initView();
		initData();
		initSystemBarTint();
		
	}

	private void initView() {
		webView = (WebView) findViewById(R.id.web_news_view);
		llBackPage = (LinearLayout) findViewById(R.id.ll_back_page);
		llMenuSelect = (LinearLayout) findViewById(R.id.ll_menu_select);
		loadingMonIndicator = (MonIndicator) findViewById(R.id.loading_monindicator);
		viewMask = findViewById(R.id.view_mask);
		llBackPage.setOnClickListener(this);
		llMenuSelect.setOnClickListener(this);

		rlHead = (RelativeLayout) findViewById(R.id.head_hide);
		rlFooter = (RelativeLayout) findViewById(R.id.footer_hide);

		TypedArray typedArray = obtainStyledAttributes(null, R.styleable.bottom);
		bottomTextColor = typedArray.getColor(
				R.styleable.bottom_bottomTextColor, 0xff0000);
		typedArray.recycle(); // 必须回收

	}

	private void initData() {
		llMenuSelect.setVisibility(View.GONE);
		loadingMonIndicator.setColors(new int[] { 0xFF66cccc, 0xFFccff99,
				0xFFccffcc, 0xFF66cc99, 0xFF66cc66 });
		webView.setWebViewClient(new WebViewClient() {
			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				if (url.equals(detailsUrl)) {
					view.loadUrl(url);
					return true;
				} else {
					return false;
				}
			}

			@Override
			public void onPageFinished(WebView view, String url) {
				super.onPageFinished(view, url);
				loadingMonIndicator.setVisibility(View.GONE);
				if (tagSuccess) {
					llMenuSelect.setVisibility(View.VISIBLE);
					ReadedMark.setReaded(detailsUrl, NewsDetailActivity.this);
				} else {
					llMenuSelect.setVisibility(View.GONE);
				}
			}

			@Override
			@Deprecated
			public void onReceivedError(WebView view, int errorCode,
					String description, String failingUrl) {
				super.onReceivedError(view, errorCode, description, failingUrl);

				String themeStyle = SharedPreUtils.getComSharePref(
						NewsDetailActivity.this, "theme_style", "day");
				if (themeStyle.equals("day")) {
					view.loadUrl("file:///android_asset/error_day.html");
				} else {
					view.loadUrl("file:///android_asset/error_night.html");
				}
				tagSuccess = false;
				llMenuSelect.setVisibility(View.GONE);
			}

		});
		
		setTextSize(false);
		
		webView.loadUrl(detailsUrl);

	}

	private int selectedPosition;
	private int bottomTextColor;
	private View viewMask;
	private String themeStyle;
	private RelativeLayout rlFooter;
	private RelativeLayout rlHead;
	private LinearLayout llMenuBg;
	private SystemBarTintUtils mBarTintUtils;

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.ll_back_page:
			finish(); // 事件都交给了popup自己处理了
			break;
		case R.id.ll_menu_select:
			if (popup == null) {
				View view = View.inflate(NewsDetailActivity.this,
						R.layout.item_select_menu, null);

				LinearLayout llMenuShare = (LinearLayout) view
						.findViewById(R.id.ll_menu_share);
				LinearLayout llMenuCollect = (LinearLayout) view
						.findViewById(R.id.ll_menu_collect);
				LinearLayout llMenuTextsize = (LinearLayout) view
						.findViewById(R.id.ll_menu_textsize);
				LinearLayout llMenuNight = (LinearLayout) view
						.findViewById(R.id.ll_menu_night_day);
				ivCollect = (ImageView) view.findViewById(R.id.iv_menu_collect);
				TextView tvMode = (TextView) view
						.findViewById(R.id.tv_mode_day);
				llMenuBg = (LinearLayout) view.findViewById(R.id.ll_menu_bg);

				String themeStyle = SharedPreUtils.getComSharePref(
						NewsDetailActivity.this, "theme_style", "day");
				if (themeStyle.equals("night")) {
					llMenuBg.setBackgroundResource(R.drawable.menu_night_bg);
					tvMode.setText("夜间模式");
				} else {
					llMenuBg.setBackgroundResource(R.drawable.menu_day_bg);
					tvMode.setText("日间模式");
				}

				if (Collectdao.querySelectedId(NewsDetailActivity.this,
						detailsUrl)) {
					ivCollect.setImageResource(R.drawable.menu_collect_true);

				} else {
					ivCollect.setImageResource(R.drawable.menu_collect_default);
				}
				llMenuShare.setOnClickListener(this);
				llMenuCollect.setOnClickListener(this);
				llMenuTextsize.setOnClickListener(this);
				llMenuNight.setOnClickListener(this);

				view.startAnimation(AnimationUtils.getAnimationIn());
				popup = new PopupWindow(view, LayoutParams.WRAP_CONTENT,
						LayoutParams.WRAP_CONTENT, true);// 在前面设置
				popup.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));// 设置在后面
				popup.showAsDropDown(llMenuSelect, 0,
						DensityUtils.dpChangepx(NewsDetailActivity.this, -32)); // 像数为单位84
			} else if (popup != null && !popup.isShowing()) {
				// 有可能隐藏了
				popup.showAsDropDown(llMenuSelect, 0,
						DensityUtils.dpChangepx(NewsDetailActivity.this, -32)); // 像数为单位84
			}
			break;

		case R.id.ll_menu_share:
			ShareUtils.getShareSDk(NewsDetailActivity.this, newsTitle,
					detailsUrl, imgUrl);
			if (popup != null) {
				popup.dismiss();
				popup = null;
			}
			break;
		case R.id.ll_menu_collect:
			if (Collectdao.querySelectedId(NewsDetailActivity.this, detailsUrl)) {
				ivCollect.setImageResource(R.drawable.menu_collect_default);
				Collectdao.deleteSelected(NewsDetailActivity.this, detailsUrl);
				ToastUtils.makeText(NewsDetailActivity.this, "取消收藏");
			} else {
				ivCollect.setImageResource(R.drawable.menu_collect_true);
				Collectdao.addCollectDao(NewsDetailActivity.this, detailsUrl);
				ToastUtils.makeText(NewsDetailActivity.this, "收藏成功");
			}
			if (popup != null) {
				popup.dismiss();
				popup = null;
			}
			break;
		case R.id.ll_menu_textsize:
			if (popup != null) {
				popup.dismiss();
				popup = null;
			}
			setTextSize(true);
			break;

		case R.id.ll_menu_night_day:
			String themeStyle = SharedPreUtils.getComSharePref(
					NewsDetailActivity.this, "theme_style", "day");
			if (themeStyle.equals("day")) {
				setTheme(R.style.MyThemeNight);
				SharedPreUtils.setComSharePref(NewsDetailActivity.this, "theme_style","night");
			} else if (themeStyle.equals("night")) {
				setTheme(R.style.MyThemeDefault);
				SharedPreUtils.setComSharePref(NewsDetailActivity.this, "theme_style","day");
			}
			setTheme();
			if (popup != null) {
				popup.dismiss();
				popup = null;
			}
			break;
		}
	}

	private void setTextSize(boolean isShow) {
		final WebSettings webSettings = webView.getSettings();
		int mCurrentItem = Integer.parseInt(SharedPreUtils.getComSharePref(
				NewsDetailActivity.this, "text_size_adjust", "2"));
		
		if(isShow){
			String[] items = new String[] { "超小号", "小号", "正常", "大号", "超大号" };
			AlertDialog.Builder builder = new AlertDialog.Builder(
					NewsDetailActivity.this);
			builder.setTitle("字体调节");
			builder.setSingleChoiceItems(items, mCurrentItem,
					new AlertDialog.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							selectedPosition = which;
						}
					});

			builder.setPositiveButton("确定", new AlertDialog.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					switch (selectedPosition) {
					case 0:
						webSettings.setTextSize(TextSize.SMALLEST);
						break;
					case 1:
						webSettings.setTextSize(TextSize.SMALLER);
						break;
					case 2:
						webSettings.setTextSize(TextSize.NORMAL);
						break;
					case 3:
						webSettings.setTextSize(TextSize.LARGER);
						break;
					case 4:
						webSettings.setTextSize(TextSize.LARGEST);
						break;
					}
					SharedPreUtils.setComSharePref(NewsDetailActivity.this,
							"text_size_adjust", selectedPosition + "");
				}
			});

			builder.setNegativeButton("取消", null);
			builder.show();
		}else{
			switch (mCurrentItem) {
			case 0:
				webSettings.setTextSize(TextSize.SMALLEST);
				break;
			case 1:
				webSettings.setTextSize(TextSize.SMALLER);
				break;
			case 2:
				webSettings.setTextSize(TextSize.NORMAL);
				break;
			case 3:
				webSettings.setTextSize(TextSize.LARGER);
				break;
			case 4:
				webSettings.setTextSize(TextSize.LARGEST);
				break;
			}
		}
		
	}

	@SuppressWarnings("static-access")
	private void setTheme() {
		
		TypedArray typeMainText = obtainStyledAttributes(null, R.styleable.maintext);
		int webviewMask = typeMainText.getColor(R.styleable.maintext_webview_mask, 0xffffffff);
		viewMask.setBackgroundColor(webviewMask);	//遮罩
		typeMainText.recycle(); // 必须回收
		
		TypedArray typedTheme = obtainStyledAttributes(null, R.styleable.theme);
		int mainColor = typedTheme.getColor(R.styleable.theme_mainBackgroundColor, 0xffffffff);
		rlHead.setBackgroundColor(mainColor);
		rlFooter.setBackgroundColor(mainColor);
		typedTheme.recycle(); // 必须回收
		
		TypedArray typedBottom = obtainStyledAttributes(null, R.styleable.bottom);
		int bottomColor = typedBottom.getColor(R.styleable.bottom_bottomTextColor, 0xffffffff);
		mBarTintUtils.setNavigationBarTint(bottomColor);
		mBarTintUtils.setStatusBarTint(bottomColor);
		typedBottom.recycle(); // 必须回收
	}

	@SuppressWarnings("static-access")
	private void initSystemBarTint() {
		mBarTintUtils = new SystemBarTintUtils(this);
		mBarTintUtils.setNavigationBarTint(bottomTextColor);
		mBarTintUtils.setStatusBarTint(bottomTextColor);
	}

}
