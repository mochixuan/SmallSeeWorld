package com.wx.seeworld.Tools;

import io.vov.vitamio.MediaPlayer;
import io.vov.vitamio.MediaPlayer.OnPreparedListener;
import io.vov.vitamio.Vitamio;
import io.vov.vitamio.widget.MediaController;
import io.vov.vitamio.widget.VideoView;

import java.io.IOException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import android.content.Context;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.wx.seeworld.RecyclerView.RecyclerVideoAdapder;
import com.wx.seeworld.Utils.JudgmentIsNetUtils;
import com.wx.seeworld.Utils.ToastUtils;

public class ViewPlayerUI {

	private static VideoView mVideoView;
	private static Context mContext;
	private static boolean isPlayer;
	private static String html;
	private static RelativeLayout progressLoading;
	private static ImageView mIvPlayer;
	private static ImageView mIvPicture;
	private static int AGAINREQUEST=0;
	
	public static void Player(VideoView videoView,Context context,String Html,RelativeLayout progressloading
			,ImageView ivPlayer,ImageView ivPicture) {
		mVideoView = videoView;
		mContext = context;
		html = Html;
		progressLoading=progressloading;
		mIvPlayer=ivPlayer;
		mIvPicture=ivPicture;
		getVideoData();
	}

	// 初始化数据
	private static void initData(String videoUrl) {

		mVideoView.setVideoPath(videoUrl);
		mVideoView.setOnPreparedListener(new OnPreparedListener() {
			@Override
			public void onPrepared(MediaPlayer mp) {
				mVideoView.start();
				mVideoView.setMediaController(new MediaController(mContext)); // 自带的
				isPlayer = true;
				progressLoading.setVisibility(View.INVISIBLE);
			}
		});

	}

	// 初始化
	private static void initOrignal(Context context) {
		Vitamio.isInitialized(context);
	}

	// 停止播放
	public static void StopPlayer() {
		if (isPlayer) {
			mVideoView.stopPlayback();
			isPlayer = false;
		}
	}

	public static void continuePlayer() {

	}

	/*-----------------------------videoUrl----------------------------------------*/
	private static void getVideoData() {
		int networkAvailable = JudgmentIsNetUtils.isNetworkAvailable(mContext);
		if (networkAvailable == JudgmentIsNetUtils.NOCONNECT) {
			ToastUtils.makeText(mContext, "未连接网络");
			return;
		}
		if (html == null)
			return;
		new AsyncTask<String, Void, Document>() {
			@Override
			protected Document doInBackground(String... params) {
				String html = params[0];
				try {
					Document document = Jsoup.connect(html).timeout(10000)
							.data("query", "Java").userAgent("Mozilla") // 证明是电脑
							.cookie("auth", "token").get();
					return document;
				} catch (IOException e) {
					e.printStackTrace();
					return null;
				}
			}
			@Override
			protected void onPostExecute(Document document) {
				super.onPostExecute(document);
				if (document == null && AGAINREQUEST==1) {
					AGAINREQUEST=0;
					Toast.makeText(mContext, "服务器错误或网络不稳定", Toast.LENGTH_SHORT).show();
					RecyclerVideoAdapder.currentPlayer=-1;
					mIvPicture.setVisibility(View.VISIBLE);
					mIvPlayer.setVisibility(View.VISIBLE);
					progressLoading.setVisibility(View.INVISIBLE);
					mVideoView.setVisibility(View.INVISIBLE);
					return;
				}else{
					++AGAINREQUEST;
					getVideoData();//请求两次
				}
				String videoUrl = document.getElementById("detailVideo").attr("data-video");
				startPlayerInit(videoUrl);
			}
		}.execute(html);
	}
	private static void startPlayerInit(String videoUrl) {
		initOrignal(mContext);
		initData(videoUrl);
	}
	/*---------------------------------------------------------------------*/

}
